import os
import pandas as pd
import mimetypes
import re
from io import BytesIO
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import landscape, A4
from reportlab.lib.units import mm
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
from PyPDF2 import PdfReader, PdfWriter
from pdf2image import convert_from_path


# --- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå output ---
os.makedirs("output", exist_ok=True)

# --- ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå ---
font_path = "fonts/DancingScript-VariableFont_wght.ttf"
if os.path.exists(font_path):
    pdfmetrics.registerFont(TTFont("DancingScript", font_path))
    font_name = "DancingScript"
else:
    print("‚ö† ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö ‡πÉ‡∏ä‡πâ Helvetica ‡πÅ‡∏ó‡∏ô")
    font_name = "Helvetica"

# --- ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ---
y_offset = 0 * mm  # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏Ç‡∏∂‡πâ‡∏ô(+)/‡∏•‡∏á(-)

# --- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
data_dir = "data"
data_files = [f for f in os.listdir(data_dir) if f.lower().endswith((".xlsx", ".csv"))]

if not data_files:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data/")
    exit(1)

print("\nüìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
for i, f in enumerate(data_files, 1):
    print(f"{i}. {f}")
while True:
    try:
        data_choice = int(input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: "))
        if 1 <= data_choice <= len(data_files):
            file_path = os.path.join(data_dir, data_files[data_choice - 1])
            break
        else:
            print("‚ùå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    except:
        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")

# --- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á ---
background_dir = "images"
bg_files = [f for f in os.listdir(background_dir) if f.lower().endswith((".png", ".jpg", ".jpeg", ".pdf"))]

if not bg_files:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå images/")
    exit(1)

print("\nüé® ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á:")
for i, f in enumerate(bg_files, 1):
    print(f"{i}. {f}")
while True:
    try:
        bg_choice = int(input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á: "))
        if 1 <= bg_choice <= len(bg_files):
            selected_background = os.path.join(background_dir, bg_files[bg_choice - 1])
            break
        else:
            print("‚ùå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    except:
        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")

is_pdf_bg = selected_background.lower().endswith(".pdf")

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° overlay ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF background ---
def create_text_overlay(code, name, course):
    buffer = BytesIO()
    pdf = canvas.Canvas(buffer, pagesize=landscape(A4))
    width, height = landscape(A4)

    # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤ A4

    # ‡∏•‡∏≠‡∏á‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏ô‡πà ‡πÜ
    pdf.setFont("DancingScript", 20)
    pdf.setFillColorRGB(0, 0, 0)
    pdf.drawString(400,700, code)
    pdf.drawString(100, height - 150, name)
    pdf.drawString(100, height - 200, course)

    pdf.save()
    buffer.seek(0)
    return buffer

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£ ---
def create_certificate(output_path, code, name, course, background, is_pdf):
    width, height = landscape(A4)

    if is_pdf:
        overlay = create_text_overlay(code, name, course)
        bg_reader = PdfReader(background)
        overlay_reader = PdfReader(overlay)
        writer = PdfWriter()
        bg_page = bg_reader.pages[0]
        overlay_page = overlay_reader.pages[0]
        bg_page.merge_page(overlay_page)
        writer.add_page(bg_page)
        with open(output_path, "wb") as f:
            writer.write(f)
    else:
        pdf = canvas.Canvas(output_path, pagesize=landscape(A4))
        if os.path.exists(background):
            pdf.drawImage(background, 0, 0, width=width, height=height)

        pdf.setFont("Helvetica", 15)
        pdf.setFillColorRGB(0, 0, 0)
        pdf.drawRightString(width - 25 * mm, height - 10 * mm + y_offset, f"ID: {code}")

        pdf.setFont(font_name, 56)
        pdf.drawCentredString(width / 2, height / 2 - 15 + y_offset, name)

        pdf.setFont(font_name, 26)
        pdf.drawCentredString(width / 2 + 100, height / 2 + 60 + y_offset, f"Course: {course}")
        pdf.save()

    print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF: {output_path}")

# --- ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
def load_data(path):
    ext = os.path.splitext(path)[1].lower()
    if ext == ".xlsx":
        return pd.read_excel(path, engine="openpyxl")
    elif ext == ".csv":
        return pd.read_csv(path, encoding="utf-8-sig")
    else:
        raise ValueError("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô .xlsx ‡∏´‡∏£‡∏∑‡∏≠ .csv ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")

# --- ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ---
try:
    df = load_data(file_path)
except Exception as e:
    print(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    exit(1)

if df.empty:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå")
    exit(1)

for _, row in df.iterrows():
    code = str(row["ID"]).strip()
    name = str(row["Name"]).strip()
    course = str(row["Course"]).strip()
    safe_name = re.sub(r'[\\/*?:"<>|]', "", name)
    output = f"output/{safe_name}_certificate.pdf"
    create_certificate(output, code, name, course, selected_background, is_pdf_bg)
